import { app, BrowserWindow, ipcMain, webContents } from 'electron'
const fs = require('fs')

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 700,
    width: 1000,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false
    },
    frame: false,
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

app.on('ready', () => {
  ipcMain.on('open-browser-window', handleOpenBrowserWindow)
  ipcMain.handle('get-picture-list', handleGetPictureList)
  ipcMain.handle('get-pictures-path', handleGetPicturesPath)
  createWindow()
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function handleOpenBrowserWindow(event: any, url: string) {
  const win = new BrowserWindow({
    height: 700,
    width: 1000,
    // webPreferences: {
      // preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    // },
    // frame: false,
  })

  win.webContents.session.on('will-download', (event, item, webContents) => {
    console.log(item.getFilename(), app.getPath('pictures'))
    item.setSavePath(app.getPath('pictures') + '/wallpaper-manager/' + item.getFilename())

    item.on('updated', (event, state) => {
      if (state === 'interrupted') {
        console.log('Download is interrupted but can be resumed')
      } else if (state === 'progressing') {
        if (item.isPaused()) {
          console.log('Download is paused')
        } else {
          console.log(`Received bytes: ${item.getReceivedBytes()}`)
        }
      }
    })
    item.once('done', (event, state) => {
      if (state === 'completed') {
        console.log('Download successfully')
      } else {
        console.log(`Download failed: ${state}`)
      }
    })
  })

  win.loadURL(url);
}

function handleGetPictureList() {
  return fs.readdirSync(app.getPath('pictures') + '/wallpapers/')
  // fs.readdir(app.getPath('pictures') + '/wallpapers/', (err: any, files: string[]) => {
    // return files
  // })
}

function handleGetPicturesPath() {
  return app.getPath('pictures')
}